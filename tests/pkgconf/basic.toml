[setup]
  [setup.env]
    PKG_CONFIG_PATH="{test_root}/lib1"

[noargs]
  exitcode = 1
  stderr = '<ignore>'
  expected_fail = true

[libs]
  stdout = "-L/test/lib -lfoo\n"
  args = ["--libs", "foo"]
  expected_fail = true

[lib_cflags]
  stdout = "-fPIC -I/test/include/foo -L/test/lib -lfoo\n"
  args = ["--cflags", "--libs", "foo"]
  expected_fail = true

[lib_cflags_version]
  stdout = "-fPIC -I/test/include/foo -L/test/lib -lfoo\n"
  args = ["--cflags", "--libs", "foo > 1.2"]
  expected_fail = true

[lib_cflags_version_multiple]
  stdout = "-fPIC -I/test/include/foo -L/test/lib -lbar -lfoo\n"
  args = ["--cflags", "--libs", "foo > 1.2 bar >= 1.3"]
  expected_fail = true

[lib_cflags_version_multiple_comma]
  stdout = "-fPIC -I/test/include/foo -L/test/lib -lbar -lfoo\n"
  args = ["--cflags", "--libs", "foo > 1.2,bar >= 1.3"]
  expected_fail = true

[lib_cflags_version_alt]
  stdout = "-fPIC -I/test/include/foo -L/test/lib -lfoo\n"
  args = ["--cflags", "--libs", "foo", ">", "1.2"]
  expected_fail = true

[lib_cflags_version_different]
  stdout = "-fPIC -I/test/include/foo -L/test/lib -lfoo\n"
  args = ["--cflags", "--libs", "foo", "!=", "1.3"]
  expected_fail = true

[lib_cflags_version_different_bad]
  exitcode = 1
  stderr = "Package dependency requirement 'foo != 1.2.3' could not be satisfied.\nPackage 'foo' has version '1.2.3', required version is '!= 1.2.3'\n"
  args = ["--cflags", "--libs", "foo", "!=", "1.2.3"]
  expected_fail = true

[exists_nonexistent]
  exitcode = 1
  args = ["--exists", "nonexistant"]
  expected_fail = true

[nonexistent]
  exitcode = 1
  args = ["nonexistant"]

[exists_version]
  args = ["--exists", "foo > 1.2"]
  expected_fail = true

[exists_version_alt]
  args = ["--exists", "foo", ">", "1.2"]
  expected_fail = true

[exists_version_bad]
  exitcode = 1
  args = ["--exists", "foo > 1.2.3"]
  expected_fail = true

[uninstalled_bad]
  exitcode = 1
  args = ["--uninstalled", "foo"]
  expected_fail = true

[uninstalled]
  args = ["--uninstalled", "omg"]
  expected_fail = true

[exists_version_bad2]
  exitcode = 1
  args = ["--exists", "foo >= "]
  expected_fail = true

[exists_version_bad3]
  exitcode = 1
  args = ["--exists", "tilde >= 1.0.0"]
  expected_fail = true

[exists]
  args = ["--exists", "tilde >= 1.0.0"]
  expected_fail = true

[exists2]
  args = ["--exists", "tilde >= 1.0.0~rc1"]
  expected_fail = true

[exists3]
  args = ["--exists", "", "foo"]
  expected_fail = true

[intermediary]
  args = ["--libs", "intermediary-1", "intermediary-2"]
  stdout = "-lintermediary-1 -lintermediary-2 -lfoo -lbar -lbaz\n"
  expected_fail = true

[circular2]
  args = ["circular-2", "--validate"]
  stdout = "circular-1: breaking circular reference (circular-1 -> circular-2 -> circular-1)\n"
  expected_fail = true

[circular1]
  args = ["circular-1", "--validate"]
  stdout = "circular-3: breaking circular reference (circular-3 -> circular-1 -> circular-3)\n"
  expected_fail = true

[circular_direct_pc]
  args = ["--libs", "{test_root}/lib1/circular-3.pc"]
  stdout = "-lcircular-3 -lcircular-1 -lcircular-2\n"
  expected_fail = true

[libs_static]
  args = ["--libs", "static-archive-libs"]
  stdout = "/libfoo.a -pthread\n"
  expected_fail = true

[pkg_config_path]
  args = ["--libs", "foo"]
  stdout = "-L/test/lib -lfoo\n"
  expected_fail = true

  [pkg_config_path.env]
    PKG_CONFIG_PATH = "{test_root}/lib1:{test_root}/lib2"

[pkg_config_path2]
  args = ["--libs", "bar"]
  stdout = "-L/test/lib -lbar -lfoo\n"
  expected_fail = true

  [pkg_config_path2.env]
    PKG_CONFIG_PATH = "{test_root}/lib1:{test_root}/lib2"

[with_path]
  args = ["--with-path={test_root}/lib", "--with-path={test_root}/lib2", "--libs", "foo"]
  stdout = "-L/test/lib -lfoo\n"
  expected_fail = true

[with_path2]
  args = ["--with-path={test_root}/lib", "--with-path={test_root}/lib2", "--libs", "bar"]
  stdout = "-L/test/lib -lbar -lfoo\n"
  expected_fail = true

[nolibs]
  args = ["--libs", "nolib"]
  stdout = "\n"
  expected_fail = true

[nocflags]
  args = ["--cflags", "nocflag"]
  stdout = "\n"

# TODO: [arbitrary_path]

# TODO: This doesn't work, needs some more magic?
#[relocatable_body]
#  args = ["--define-prefix", "--variable=prefix", "tests/lib-relocatable/lib/pkgconfig/foo.pc"]
#  stdout = "tests/lib-relocatable\n"

[single_depth_selectors]
  args = ["--with-path={test_root}/lib3", "--print-requires", "bar"]
  stdout = "foo\n"
  expected_fail = true

  [single_depth_selectors.env]
    PKG_CONFIG_MAXIMUM_TRAVERSAL_DEPTH = "1"

[license_isc]
  args = ["--license", "foo"]
  stdout = "foo: ISC\n"
  expected_fail = true

[license_noassertion]
  args = ["--license", "bar"]
  stdout = "bar: NOASSERTION\nfoo: ISC\n"
  expected_fail = true

[modversion_noflatten]
  args = ["--modversion", "bar"]
  stdout = "1.3\n"
  expected_fail = true

[exists_cflags]
  args = ["--with-path={test_root}/lib", "--cflags", "--exists-cflags", "--fragment-filter=D", "foo"]
  stdout = "-DHAVE_FOO\n"
  expected_fail = true

[exists_cflags_env]
  args = ["--with-path={test_root}/lib", "--cflags", "--exists-cflags", "--fragment-filter=D", "--env=FOO", "foo"]
  stdout = "FOO_CFLAGS='-DHAVE_FOO'\n"
  expected_fail = true

[libs_env]
  args = ["--with-path={test_root}/lib", "--libs", "--env=FOO", "foo"]
  stdout = "FOO_LIBS='-L/test/lib -lfoo'\n"
  expected_fail = true

[print_variables_env]
  args = ["--with-path={test_root}/lib", "--env=FOO", "--print-variables", "--cflags", "--libs", "foo"]
  stdout = "FOO_CFLAGS='-fPIC -I/test/include/foo'\nFOO_LIBS='-L/test/lib -lfoo'\nFOO_INCLUDEDIR='/test/include'\nFOO_LIBDIR='/test/lib'\nFOO_EXEC_PREFIX='/test'\nFOO_PREFIX='/test'\nFOO_PCFILEDIR='{test_root}/lib1'\n"
  expected_fail = true

[variable_env]
  args = ["--with-path={test_root}/lib", "--env=FOO", "--variable=includedir", "foo"]
  stdout = "FOO_INCLUDEDIR='/test/include'\n"
  expected_fail = true

# TODO: variable_env
